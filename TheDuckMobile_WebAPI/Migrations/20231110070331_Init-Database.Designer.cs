// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheDuckMobile_WebAPI.Entities;

#nullable disable

namespace TheDuckMobile_WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231110070331_Init-Database")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrandCatalog", b =>
                {
                    b.Property<int>("BrandsBrandId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogsCatalogId")
                        .HasColumnType("int");

                    b.HasKey("BrandsBrandId", "CatalogsCatalogId");

                    b.HasIndex("CatalogsCatalogId");

                    b.ToTable("BrandCatalog");
                });

            modelBuilder.Entity("CatalogSpecialFeature", b =>
                {
                    b.Property<int>("CatalogsCatalogId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialFeaturesSpecialFeatureId")
                        .HasColumnType("int");

                    b.HasKey("CatalogsCatalogId", "SpecialFeaturesSpecialFeatureId");

                    b.HasIndex("SpecialFeaturesSpecialFeatureId");

                    b.ToTable("CatalogSpecialFeature");
                });

            modelBuilder.Entity("ProductSpecialFeature", b =>
                {
                    b.Property<Guid>("ProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialFeaturesSpecialFeatureId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "SpecialFeaturesSpecialFeatureId");

                    b.HasIndex("SpecialFeaturesSpecialFeatureId");

                    b.ToTable("ProductSpecialFeature");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressId");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("WardId");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Catalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatalogId"));

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatalogURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CatalogId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Color", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiredAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Coupon", b =>
                {
                    b.Property<Guid>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUse")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxDiscount")
                        .HasColumnType("float");

                    b.Property<int>("MaxUse")
                        .HasColumnType("int");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.District", b =>
                {
                    b.Property<Guid>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ProvineId")
                        .HasColumnType("tinyint");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvineId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackImagesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackPersonEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackPersonPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.OS", b =>
                {
                    b.Property<int>("OSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OSId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OSId");

                    b.ToTable("OSs");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModifiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiredAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "StoreProductId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StoreProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OSId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("OSId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.ProductVersion", b =>
                {
                    b.Property<Guid>("ProductVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Battery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSim")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ScreenSize")
                        .HasColumnType("real");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.HasKey("ProductVersionId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductVersions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductVersion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Promotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Provine", b =>
                {
                    b.Property<byte>("ProvinceId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProvineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Provines");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.SpecialFeature", b =>
                {
                    b.Property<int>("SpecialFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialFeatureId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialFeatureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialFeatureId");

                    b.ToTable("SpecialFeatures");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Store", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CloseHours")
                        .HasColumnType("int");

                    b.Property<int>("CloseMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpenHours")
                        .HasColumnType("int");

                    b.Property<int>("OpenMinutes")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.StoreProduct", b =>
                {
                    b.Property<Guid>("StoreProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelling")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreProductId");

                    b.HasIndex("ProductVersionId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreProducts");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteRate")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Ward", b =>
                {
                    b.Property<Guid>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Laptop", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.ProductVersion");

                    b.Property<int>("BusRAM")
                        .HasColumnType("int");

                    b.Property<string>("GraphicCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardDrive")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfRAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WifiStandard")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Laptop");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Phone", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.ProductVersion");

                    b.Property<string>("BackCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Buetooth")
                        .HasColumnType("bit");

                    b.Property<string>("ChargingPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GPS")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadphoneJack")
                        .HasColumnType("bit");

                    b.Property<int>("InternalMemory")
                        .HasColumnType("int");

                    b.Property<string>("NetworkType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityFeature")
                        .HasColumnType("int");

                    b.Property<string>("WaterResistance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Phone");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.SmartWatch", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.ProductVersion");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("GPS")
                        .HasColumnType("bit");

                    b.Property<int>("InternalMemory")
                        .HasColumnType("int");

                    b.Property<int>("WatchFaceShape")
                        .HasColumnType("int");

                    b.Property<string>("WaterResistance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WireMaterial")
                        .HasColumnType("int");

                    b.ToTable("ProductVersions", t =>
                        {
                            t.Property("GPS")
                                .HasColumnName("SmartWatch_GPS");

                            t.Property("InternalMemory")
                                .HasColumnName("SmartWatch_InternalMemory");

                            t.Property("WaterResistance")
                                .HasColumnName("SmartWatch_WaterResistance");
                        });

                    b.HasDiscriminator().HasValue("SmartWatch");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Tablet", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.ProductVersion");

                    b.Property<string>("BackCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("bit");

                    b.Property<string>("ChargingPort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GPS")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadphoneJack")
                        .HasColumnType("bit");

                    b.Property<int>("InternalMemory")
                        .HasColumnType("int");

                    b.Property<string>("NetworkType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.ToTable("ProductVersions", t =>
                        {
                            t.Property("BackCamera")
                                .HasColumnName("Tablet_BackCamera");

                            t.Property("Bluetooth")
                                .HasColumnName("Tablet_Bluetooth");

                            t.Property("ChargingPort")
                                .HasColumnName("Tablet_ChargingPort");

                            t.Property("FrontCamera")
                                .HasColumnName("Tablet_FrontCamera");

                            t.Property("GPS")
                                .HasColumnName("Tablet_GPS");

                            t.Property("HeadphoneJack")
                                .HasColumnName("Tablet_HeadphoneJack");

                            t.Property("InternalMemory")
                                .HasColumnName("Tablet_InternalMemory");

                            t.Property("NetworkType")
                                .HasColumnName("Tablet_NetworkType");

                            t.Property("Wifi")
                                .HasColumnName("Tablet_Wifi");
                        });

                    b.HasDiscriminator().HasValue("Tablet");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Admin", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Customer", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Staff", b =>
                {
                    b.HasBaseType("TheDuckMobile_WebAPI.Entities.User");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("StoreId");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("BrandCatalog", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Catalog", null)
                        .WithMany()
                        .HasForeignKey("CatalogsCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogSpecialFeature", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Catalog", null)
                        .WithMany()
                        .HasForeignKey("CatalogsCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.SpecialFeature", null)
                        .WithMany()
                        .HasForeignKey("SpecialFeaturesSpecialFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSpecialFeature", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.SpecialFeature", null)
                        .WithMany()
                        .HasForeignKey("SpecialFeaturesSpecialFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Address", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Store", "Store")
                        .WithOne("Address")
                        .HasForeignKey("TheDuckMobile_WebAPI.Entities.Address", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Ward", "Ward")
                        .WithMany("Addresses")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.District", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Provine", "Provine")
                        .WithMany("Districts")
                        .HasForeignKey("ProvineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provine");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Order", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Staff", "Staff")
                        .WithMany("Orders")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.OrderItem", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Promotion", "Promotion")
                        .WithMany("OrderItems")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.StoreProduct", "StoreProduct")
                        .WithMany("OrderItems")
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Promotion");

                    b.Navigation("StoreProduct");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Product", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Catalog", "Catalog")
                        .WithMany("Products")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.OS", "OS")
                        .WithMany("Products")
                        .HasForeignKey("OSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Catalog");

                    b.Navigation("OS");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.ProductVersion", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Color", "Color")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Product", null)
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId");

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Promotion", "Promotion")
                        .WithMany("ProductVersions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.StoreProduct", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.ProductVersion", "ProductVersion")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVersion");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Vote", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Customer", "Customer")
                        .WithMany("Votes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheDuckMobile_WebAPI.Entities.Product", "Product")
                        .WithMany("Votes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Ward", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Staff", b =>
                {
                    b.HasOne("TheDuckMobile_WebAPI.Entities.Store", "Store")
                        .WithMany("Staffs")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Catalog", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Color", b =>
                {
                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.OS", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Product", b =>
                {
                    b.Navigation("ProductVersions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.ProductVersion", b =>
                {
                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Promotion", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductVersions");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Provine", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Store", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");

                    b.Navigation("Staffs");

                    b.Navigation("StoreProducts");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.StoreProduct", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.User", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Ward", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("TheDuckMobile_WebAPI.Entities.Staff", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
